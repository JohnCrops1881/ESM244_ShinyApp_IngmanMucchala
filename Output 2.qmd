---
title: "Output 2"
format: html
editor: visual
---

```{r}
library(shiny)
library(leaflet)
library(tidyverse)
library(here)


```

```{r}

low_income_data <- read_csv(here('data/output 1/li-territory-and-location-chart.csv')) %>%
  janitor::clean_names() %>% 
  rename(capacity_kw = capacity_k_w) %>% 
  rename(county = category)

nem_policy_data <- read_csv(here('data/output 1/nem-territory-and-location-chart.csv')) %>%
  janitor::clean_names() %>% 
  mutate(capacity_kw = capacity_mw*1000) %>% 
  rename(county = category)


```

```{r}
ui <- fluidPage(
  titlePanel("Solar Capacity Comparison"),
  sidebarLayout(
    sidebarPanel(
      selectInput("policy", "Select Policy:",
                  choices = c("Low-Income Policy", "NEM Policy"),
                  selected = "Low-Income Policy"),
      uiOutput("county_selection")
    ),
    mainPanel(
      plotOutput("capacity_plot")
    )
  )
)

# Defining the server logichere 
server <- function(input, output, session) {
  # Initialize reactiveValues object to store selected counties so when people switch policies the counties selected are retained
  selected_counties <- reactiveValues()
  
  # Update selected counties when policy changes
  observeEvent(input$policy, {
    selected_counties$prev <- isolate(selected_counties$curr)
    selected_counties$curr <- isolate(input$counties)
  })
  
  # Generating UI for selecting counties based on policy data
  output$county_selection <- renderUI({
    policy_data <- switch(input$policy,
                          "Low-Income Policy" = low_income_data,
                          "NEM Policy" = nem_policy_data)
    
    # Retain selected counties if available in the other policy data
    selected <- if (!is.null(selected_counties$curr)) {
      intersect(selected_counties$curr, unique(policy_data$county))
    } else {
      NULL
    }
    
    selectInput("counties", "Select Counties:",
                choices = unique(policy_data$county),
                multiple = TRUE,
                selected = selected)
  })
  
  # Generate plot based on selected policy and counties
  output$capacity_plot <- renderPlot({
    # Filter data based on selected policy
    policy_data <- switch(input$policy,
                          "Low-Income Policy" = low_income_data,
                          "NEM Policy" = nem_policy_data)
    
    # Filter data based on selected counties
    selected_county_data <- policy_data %>%
      filter(county %in% input$counties)
    
    # Plot for comparing selected counties
    ggplot(selected_county_data, aes(x = county, y = capacity_kw, fill = capacity_kw)) +
      geom_bar(stat = "identity") +
      labs(title = "Solar Capacity by County",
           x = "County", y = "Solar Capacity (kW)") +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```
